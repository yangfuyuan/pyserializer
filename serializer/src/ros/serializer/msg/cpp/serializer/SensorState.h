/* auto-generated by genmsg_cpp from /home/patrick/Eclipse/serializer/src/ros/serializer/msg/SensorState.msg.  Do not edit! */
#ifndef SERIALIZER_SENSORSTATE_H
#define SERIALIZER_SENSORSTATE_H

#include <string>
#include <vector>
#include "ros/message.h"
#include "ros/debug.h"
#include "ros/assert.h"
#include "ros/time.h"

#include "roslib/Header.h"

namespace serializer
{

//! \htmlinclude SensorState.msg.html

class SensorState : public ros::Message
{
public:
  typedef boost::shared_ptr<SensorState> Ptr;
  typedef boost::shared_ptr<SensorState const> ConstPtr;

  typedef roslib::Header _header_type;
  typedef std::vector<std::string> _name_type;
  typedef std::vector<double> _value_type;

  roslib::Header header;
  std::vector<std::string> name;
  std::vector<double> value;

  SensorState() : ros::Message()
  {
  }
  SensorState(const SensorState &copy) : ros::Message(),
    header(copy.header)
  {
    (void)copy;
    name = copy.name;
    value = copy.value;
  }
  SensorState &operator =(const SensorState &copy)
  {
    if (this == &copy)
      return *this;
    name.clear();
    value.clear();
    header = copy.header;
    name = copy.name;
    value = copy.value;
    return *this;
  }
  virtual ~SensorState() 
  {
    name.clear();
    value.clear();
  }
  inline static std::string __s_getDataType() { return std::string("serializer/SensorState"); }
  inline static std::string __s_getMD5Sum() { return std::string("44860e07301dfb37702ea8848351bb12"); }
  inline static std::string __s_getMessageDefinition()
  {
    return std::string(
    "Header header\n"
    "\n"
    "string[] name\n"
    "float64[] value\n"
    "\n"
    "================================================================================\n"
    "MSG: roslib/Header\n"
    "# Standard metadata for higher-level stamped data types.\n"
    "# This is generally used to communicate timestamped data \n"
    "# in a particular coordinate frame.\n"
    "# \n"
    "# sequence ID: consecutively increasing ID \n"
    "uint32 seq\n"
    "#Two-integer timestamp that is expressed as:\n"
    "# * stamp.secs: seconds (stamp_secs) since epoch\n"
    "# * stamp.nsecs: nanoseconds since stamp_secs\n"
    "# time-handling sugar is provided by the client library\n"
    "time stamp\n"
    "#Frame this data is associated with\n"
    "# 0: no frame\n"
    "# 1: global frame\n"
    "string frame_id\n"
    "\n"
    "\n"
    );
  }
  inline virtual const std::string __getDataType() const { return __s_getDataType(); }
  inline virtual const std::string __getMD5Sum() const { return __s_getMD5Sum(); }
  inline virtual const std::string __getMessageDefinition() const { return __s_getMessageDefinition(); }
  void set_name_size(uint32_t __ros_new_size)
  {
    this->name.resize(__ros_new_size);
  }
  inline uint32_t get_name_size() const { return name.size(); }
  uint32_t calc_name_array_serialization_len() const
  {
    uint32_t l = 0;
    uint32_t name_size = name.size();
    for (size_t i = 0; i < name_size; i++)
      l += 4 + name[i].length();
    return l;
  }
  inline void get_name_vec (std::vector<std::string> &__ros_vec) const
  {
    __ros_vec = this->name;
  }
  inline void set_name_vec(const std::vector<std::string> &__ros_vec)
  {
    this->name = __ros_vec;
  }
  void set_value_size(uint32_t __ros_new_size)
  {
    this->value.resize(__ros_new_size);
  }
  inline uint32_t get_value_size() const { return value.size(); }
  inline void get_value_vec (std::vector<double> &__ros_vec) const
  {
    __ros_vec = this->value;
  }
  inline void set_value_vec(const std::vector<double> &__ros_vec)
  {
    this->value = __ros_vec;
  }
  inline uint32_t serializationLength() const
  {
    unsigned __l = 0;
    __l += header.serializationLength(); // header
    __l += 4 + calc_name_array_serialization_len(); // name
    __l += 4 + (value.size() ? value.size() * 8 : 0); // value
    return __l;
  }
  virtual uint8_t *serialize(uint8_t *write_ptr,
                             uint32_t seq) const
  {
    roslib::Header _ser_header = header;
    bool __reset_seq = (header.seq == 0);
    if (__reset_seq) _ser_header.seq = seq;
    write_ptr = _ser_header.serialize(write_ptr, seq);
    uint32_t __name_size = name.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __name_size);
    for (size_t i = 0; i < __name_size; i++)
    {
      unsigned __ros_name_i__len = name[i].length();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __ros_name_i__len);
    SROS_SERIALIZE_BUFFER(write_ptr, name[i].c_str(), __ros_name_i__len);
    }
    uint32_t __value_size = value.size();
    SROS_SERIALIZE_PRIMITIVE(write_ptr, __value_size);
    memcpy(write_ptr, &value[0], sizeof(double) * __value_size);
    write_ptr += sizeof(double) * __value_size;
    return write_ptr;
  }
  virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    read_ptr = header.deserialize(read_ptr);
    uint32_t __name_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __name_size);
    set_name_size(__name_size);
    for (size_t i = 0; i < __name_size; i++)
    {
      unsigned __ros_name_i__len;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __ros_name_i__len);
    name[i] = std::string((const char *)read_ptr, __ros_name_i__len);
    read_ptr += __ros_name_i__len;
    }
    uint32_t __value_size;
    SROS_DESERIALIZE_PRIMITIVE(read_ptr, __value_size);
    set_value_size(__value_size);
    memcpy(&value[0], read_ptr, sizeof(double) * __value_size);
    read_ptr += sizeof(double) * __value_size;
    return read_ptr;
  }
};

typedef boost::shared_ptr<SensorState> SensorStatePtr;
typedef boost::shared_ptr<SensorState const> SensorStateConstPtr;


}

#endif
